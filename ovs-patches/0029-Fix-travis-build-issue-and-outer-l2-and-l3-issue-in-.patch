From 5d29f1bbcb8e2a9e0dff130fa6bfb87767fc8b05 Mon Sep 17 00:00:00 2001
From: Yi Yang <yangyi01@inspur.com>
Date: Thu, 26 Nov 2020 03:28:38 -0500
Subject: [PATCH 29/47] Fix travis build issue and outer l2 and l3 issue in
 vlan case

Note: IPv6 fix introduced a bug in dp_packet_hwol_set_vxlan_tcp_seg,
so outer_l2_len is wrong when push vlan for outer header, this revert
change and make sure outer l2 and l3 len are set in
dp_packet_hwol_set_vxlan_tcp_seg.

In addition, also fixed some travis build issues.

Signed-off-by: Yi Yang <yangyi01@inspur.com>
---
 lib/dp-packet.h    | 78 ++++++++++++++++++++++++++++++----------------
 lib/netdev-dpdk.c  |  6 ----
 lib/netdev-linux.c | 16 +++++-----
 lib/netdev.c       | 18 +++++------
 4 files changed, 68 insertions(+), 50 deletions(-)

diff --git a/lib/dp-packet.h b/lib/dp-packet.h
index 39d051709..8b4cb9388 100644
--- a/lib/dp-packet.h
+++ b/lib/dp-packet.h
@@ -974,7 +974,7 @@ dp_packet_hwol_is_tso(const struct dp_packet *b)
 
 /* Returns 'true' if packet 'b' is marked for UDP segmentation offloading. */
 static inline bool
-dp_packet_hwol_is_uso(const struct dp_packet *b)
+dp_packet_hwol_is_ufo(const struct dp_packet *b)
 {
     return !!(*dp_packet_ol_flags_ptr(b) & DP_PACKET_OL_TX_UDP_SEG);
 }
@@ -1102,6 +1102,14 @@ dp_packet_hwol_set_csum_tcp(struct dp_packet *b)
     *dp_packet_ol_flags_ptr(b) |= DP_PACKET_OL_TX_TCP_CKSUM;
 }
 
+/* Reset TCP checksum offloading flag for packet 'b'.
+ */
+static inline void
+dp_packet_hwol_reset_csum_tcp(struct dp_packet *b)
+{
+    *dp_packet_ol_flags_ptr(b) &= ~DP_PACKET_OL_TX_TCP_CKSUM;
+}
+
 /* Mark packet 'b' for UDP checksum offloading.  It implies that either
  * the packet 'b' is marked for IPv4 or IPv6 checksum offloading. */
 static inline void
@@ -1110,6 +1118,14 @@ dp_packet_hwol_set_csum_udp(struct dp_packet *b)
     *dp_packet_ol_flags_ptr(b) |= DP_PACKET_OL_TX_UDP_CKSUM;
 }
 
+/* Reset UDP checksum offloading flag for packet 'b'.
+ */
+static inline void
+dp_packet_hwol_reset_csum_udp(struct dp_packet *b)
+{
+    *dp_packet_ol_flags_ptr(b) &= ~DP_PACKET_OL_TX_UDP_CKSUM;
+}
+
 /* Mark packet 'b' for SCTP checksum offloading.  It implies that either
  * the packet 'b' is marked for IPv4 or IPv6 checksum offloading. */
 static inline void
@@ -1137,20 +1153,6 @@ dp_packet_hwol_set_udp_seg(struct dp_packet *b)
 }
 
 #ifdef DPDK_NETDEV
-/* Mark packet 'b' for VXLAN TCP segmentation offloading. */
-static inline void
-dp_packet_hwol_set_vxlan_tcp_seg(struct dp_packet *b)
-{
-    b->mbuf.ol_flags |= DP_PACKET_OL_TX_TUNNEL_VXLAN;
-}
-
-/* Check if it is a VXLAN packet */
-static inline bool
-dp_packet_hwol_is_vxlan_tcp_seg(struct dp_packet *b)
-{
-    return (b->mbuf.ol_flags & DP_PACKET_OL_TX_TUNNEL_VXLAN);
-}
-
 /* Set l2_len for the packet 'b' */
 static inline void
 dp_packet_hwol_set_l2_len(struct dp_packet *b, int l2_len)
@@ -1200,6 +1202,13 @@ dp_packet_hwol_get_l3_len(struct dp_packet *b)
     return b->mbuf.l3_len;
 }
 
+/* Get l4_len for the packet 'b' */
+static inline int
+dp_packet_hwol_get_l4_len(struct dp_packet *b)
+{
+    return b->mbuf.l4_len;
+}
+
 /* Get outer_l2_len for the packet 'b' */
 static inline int
 dp_packet_hwol_get_outer_l2_len(struct dp_packet *b)
@@ -1223,18 +1232,6 @@ dp_packet_hwol_is_multiseg(struct dp_packet *b)
 }
 
 #else
-/* Mark packet 'b' for VXLAN TCP segmentation offloading. */
-static inline void
-dp_packet_hwol_set_vxlan_tcp_seg(struct dp_packet *b OVS_UNUSED)
-{
-}
-
-/* Check if it is a VXLAN packet */
-static inline bool
-dp_packet_hwol_is_vxlan_tcp_seg(struct dp_packet *b OVS_UNUSED)
-{
-}
-
 /* Set l2_len for the packet 'b' */
 static inline void
 dp_packet_hwol_set_l2_len(struct dp_packet *b OVS_UNUSED,
@@ -1282,6 +1279,13 @@ dp_packet_hwol_get_l3_len(struct dp_packet *b)
     return ((char *)dp_packet_l4(b) - (char *)dp_packet_l3(b));
 }
 
+/* Get l4_len for the packet 'b' */
+static inline int
+dp_packet_hwol_get_l4_len(struct dp_packet *b OVS_UNUSED)
+{
+    return 0;
+}
+
 /* Get outer_l2_len for the packet 'b' */
 static inline int
 dp_packet_hwol_get_outer_l2_len(struct dp_packet *b)
@@ -1304,6 +1308,26 @@ dp_packet_hwol_is_multiseg(struct dp_packet *b)
 }
 #endif /* DPDK_NETDEV */
 
+/* Mark packet 'b' for VXLAN TCP segmentation offloading. */
+static inline void
+dp_packet_hwol_set_vxlan_tcp_seg(struct dp_packet *b)
+{
+    *dp_packet_ol_flags_ptr(b) |= DP_PACKET_OL_TX_TUNNEL_VXLAN;
+    /* Set outer_l2_len and outer_l3_len */
+    dp_packet_hwol_set_outer_l2_len(b, (char *) dp_packet_l3(b)
+                                       - (char *) dp_packet_eth(b));
+    dp_packet_hwol_set_outer_l3_len(b, (char *) dp_packet_l4(b)
+                                       - (char *) dp_packet_l3(b));
+}
+
+/* Check if it is a VXLAN packet */
+static inline bool
+dp_packet_hwol_is_vxlan_tcp_seg(struct dp_packet *b)
+{
+    return (*dp_packet_ol_flags_ptr(b) & DP_PACKET_OL_TX_TUNNEL_VXLAN);
+}
+
+
 static inline bool
 dp_packet_ip_checksum_valid(const struct dp_packet *p)
 {
diff --git a/lib/netdev-dpdk.c b/lib/netdev-dpdk.c
index 54482f4f1..8a1706965 100644
--- a/lib/netdev-dpdk.c
+++ b/lib/netdev-dpdk.c
@@ -2276,12 +2276,6 @@ netdev_dpdk_prep_hwol_packet(struct netdev_dpdk *dev, struct rte_mbuf *mbuf)
         mbuf->l2_len += sizeof(struct udp_header)
                         + sizeof(struct vxlanhdr);
 
-        /* Set outer_l2_len and outer_l3_len */
-        dp_packet_hwol_set_outer_l2_len(pkt, (char *) dp_packet_l3(pkt)
-                                             - (char *) dp_packet_eth(pkt));
-        dp_packet_hwol_set_outer_l3_len(pkt, (char *) dp_packet_l4(pkt)
-                                             - (char *) dp_packet_l3(pkt));
-
         /* small packets whose size is less than or equal to  MTU needn't
          * VXLAN TSO. In addtion, if hardware can't support VXLAN TSO, it
          * also can't be handled. So PKT_TX_TUNNEL_VXLAN must be cleared
diff --git a/lib/netdev-linux.c b/lib/netdev-linux.c
index 7c1d42842..46507da64 100644
--- a/lib/netdev-linux.c
+++ b/lib/netdev-linux.c
@@ -1657,7 +1657,7 @@ netdev_linux_sock_batch_send(int sock, int ifindex, bool tso, int mtu,
         /* It is a GROed packet which has multiple segments, so need to merge
          * as a big packet in order that sendmmsg can handle it correctly.
          */
-        if (packet->mbuf.nb_segs > 1) {
+        if (dp_packet_hwol_is_multiseg(packet)) {
             struct dp_packet *new_packet =
                 dp_packet_new_with_headroom(dp_packet_size(packet),
                                             sizeof(struct virtio_net_hdr));
@@ -1736,7 +1736,7 @@ netdev_linux_tap_batch_send(struct netdev *netdev_, bool tso, int mtu,
         /* It is a GROed packet which has multiple segments, so need to merge
          * as a big packet in order that sendmmsg can handle it correctly.
          */
-        if (packet->mbuf.nb_segs > 1) {
+        if (dp_packet_hwol_is_multiseg(packet)) {
             struct dp_packet *new_packet =
                 dp_packet_new_with_headroom(dp_packet_size(packet),
                                             sizeof(struct virtio_net_hdr));
@@ -7180,7 +7180,7 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
         } else {
             tcp_hdr->tcp_csum = packet_csum_pseudoheader6(nh6);
         }
-        if (dp_packet_size(b) > mtu + b->mbuf.l2_len) {
+        if (dp_packet_size(b) > mtu + l2_len) {
             dp_packet_hwol_set_tcp_seg(b);
         }
         dp_packet_hwol_set_csum_tcp(b);
@@ -7194,7 +7194,7 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
         l4_len = sizeof(struct udp_header);
         dp_packet_hwol_set_l4_len(b, l4_len);
         dp_packet_set_l4(b, udp_hdr);
-        if (dp_packet_size(b) > mtu + b->mbuf.l2_len) {
+        if (dp_packet_size(b) > mtu + l2_len) {
             dp_packet_hwol_set_udp_seg(b);
         }
         dp_packet_hwol_set_csum_udp(b);
@@ -7215,20 +7215,20 @@ netdev_linux_prepend_vnet_hdr(struct dp_packet *b, int mtu OVS_UNUSED)
      * vnet_hdr can be prepended correctly. Note: here tso_segsz but not
      * mtu are used because tso_segsz may be less than mtu.
      */
-    if ((dp_packet_size(b) > tso_segsz + b->mbuf.l2_len)
+    if ((dp_packet_size(b) > tso_segsz + dp_packet_hwol_get_l2_len(b))
         && !dp_packet_hwol_l4_mask(b)) {
         netdev_linux_set_ol_flags_and_cksum(b, tso_segsz);
     }
 
     vnet = dp_packet_push_zeros(b, sizeof *vnet);
 
-    if (dp_packet_hwol_is_tso(b) || dp_packet_hwol_is_uso(b)) {
+    if (dp_packet_hwol_is_tso(b) || dp_packet_hwol_is_ufo(b)) {
         uint16_t hdr_len = ((char *)dp_packet_l4(b) - (char *)dp_packet_eth(b))
-                            + b->mbuf.l4_len;
+                            + dp_packet_hwol_get_l4_len(b);
 
         vnet->hdr_len = (OVS_FORCE __virtio16)hdr_len;
         vnet->gso_size = (OVS_FORCE __virtio16)(tso_segsz - hdr_len);
-        if (dp_packet_hwol_is_uso(b)) {
+        if (dp_packet_hwol_is_ufo(b)) {
             vnet->gso_type = VIRTIO_NET_HDR_GSO_UDP;
         } else if (dp_packet_hwol_is_ipv4(b)) {
             vnet->gso_type = VIRTIO_NET_HDR_GSO_TCPV4;
diff --git a/lib/netdev.c b/lib/netdev.c
index 94ed1c934..8c5ba5e5c 100644
--- a/lib/netdev.c
+++ b/lib/netdev.c
@@ -873,23 +873,23 @@ netdev_send_prepare_packet(const uint64_t netdev_flags,
         if (dp_packet_hwol_l4_is_tcp(packet)
             && !dp_packet_hwol_is_vxlan_tcp_seg(packet)
             && !(netdev_flags & NETDEV_TX_OFFLOAD_TCP_CKSUM)) {
-            packet->mbuf.ol_flags &= ~DP_PACKET_OL_TX_TCP_CKSUM;
+            dp_packet_hwol_reset_csum_tcp(packet);;
             /* Only calculate TCP checksum for non-TSO packet,
              * it will be calculated after GSO for TSO packet.
              */
-            if (!(packet->mbuf.ol_flags & DP_PACKET_OL_TX_TCP_SEG)) {
+            if (!dp_packet_hwol_is_tso(packet)) {
                 calculate_tcpudp_checksum(packet);
             }
             return true;
         } else if (dp_packet_hwol_l4_is_udp(packet)
             && !dp_packet_hwol_is_vxlan_tcp_seg(packet)
             && !(netdev_flags & NETDEV_TX_OFFLOAD_UDP_CKSUM)) {
-            packet->mbuf.ol_flags &= ~DP_PACKET_OL_TX_UDP_CKSUM;
+            dp_packet_hwol_reset_csum_udp(packet);;
             /* Only calculate UDP checksum for non-UFO packet,
              * it will be calculated immediately before GSO for
              * UFO packet.
              */
-            if (!(packet->mbuf.ol_flags & DP_PACKET_OL_TX_UDP_SEG)) {
+            if (!dp_packet_hwol_is_ufo(packet)) {
                 calculate_tcpudp_checksum(packet);
             }
             return true;
@@ -1071,23 +1071,23 @@ netdev_push_header(const struct netdev *netdev,
                  * for inner udp packet, so udp checksum must be set
                  * before push header in order that outer checksum can
                  * be set correctly. But GSO code will set udp checksum
-                 * if packet->mbuf.ol_flags has DP_PACKET_OL_TX_UDP_SEG.
+                 * if dp_packet_hwol_is_ufo(packet).
                  */
                 if (dp_packet_hwol_l4_is_udp(packet)) {
-                    packet->mbuf.ol_flags &= ~DP_PACKET_OL_TX_UDP_CKSUM;
+                    dp_packet_hwol_reset_csum_udp(packet);
                     /* Only calculate UDP checksum for non-UFO packet,
                      * it will be calculated immediately before GSO for
                      * UFO packet.
                      */
-                    if (!(packet->mbuf.ol_flags & DP_PACKET_OL_TX_UDP_SEG)) {
+                    if (!dp_packet_hwol_is_ufo(packet)) {
                         calculate_tcpudp_checksum(packet);
                     }
                 } else if (dp_packet_hwol_l4_is_tcp(packet)) {
-                    packet->mbuf.ol_flags &= ~DP_PACKET_OL_TX_TCP_CKSUM;
+                    dp_packet_hwol_reset_csum_tcp(packet);
                     /* Only calculate TCP checksum for non-TSO packet,
                      * it will be calculated after GSO for TSO packet.
                      */
-                    if (!(packet->mbuf.ol_flags & DP_PACKET_OL_TX_TCP_SEG)) {
+                    if (!dp_packet_hwol_is_tso(packet)) {
                         calculate_tcpudp_checksum(packet);
                     }
                 }
-- 
2.17.1

