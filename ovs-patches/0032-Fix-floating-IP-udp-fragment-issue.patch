From fd6005c35f21f497103497e1254fd911fb606830 Mon Sep 17 00:00:00 2001
From: Yi Yang <yangyi01@inspur.com>
Date: Tue, 8 Dec 2020 01:57:38 -0500
Subject: [PATCH 32/47] Fix floating IP udp fragment issue

Note: for UDP GSO, gso_size should be MTU - l3_len because
other fragments don't include UDP header except the first one,
hdr_len also shouldn't include l4_len because of same reason.

Signed-off-by: Yi Yang <yangyi01@inspur.com>
---
 lib/netdev-dpdk.c  |  9 ++++++++-
 lib/netdev-linux.c | 18 ++++++++++++++++--
 2 files changed, 24 insertions(+), 3 deletions(-)

diff --git a/lib/netdev-dpdk.c b/lib/netdev-dpdk.c
index 920d85018..3e568fe74 100644
--- a/lib/netdev-dpdk.c
+++ b/lib/netdev-dpdk.c
@@ -2229,6 +2229,8 @@ netdev_dpdk_prep_hwol_packet(struct netdev_dpdk *dev, struct rte_mbuf *mbuf)
     if ((mbuf->outer_l2_len != 0) && (mbuf->outer_l3_len != 0) &&
         ((mbuf->ol_flags & PKT_TX_TUNNEL_VXLAN) == 0) &&
         (mbuf->l2_len >= UDP_VXLAN_ETH_HDR_SIZE)) {
+        bool is_v4_frag = true;
+
         mbuf->outer_l2_len = 0;
         mbuf->outer_l3_len = 0;
         mbuf->ol_flags = 0;
@@ -2240,6 +2242,9 @@ netdev_dpdk_prep_hwol_packet(struct netdev_dpdk *dev, struct rte_mbuf *mbuf)
             mbuf->ol_flags |= PKT_TX_IP_CKSUM;
             ip_hdr = (struct rte_ipv4_hdr *)((char *)eth_hdr + mbuf->l2_len);
             l4_proto = ip_hdr->next_proto_id;
+            if (!rte_ipv4_frag_pkt_is_fragmented(ip_hdr)) {
+                is_v4_frag = false;
+            }
         } else if (mbuf->l3_len == IPV6_HEADER_LEN) {
             /* Note: no IP checksum for IPv6 */
             mbuf->ol_flags |= PKT_TX_IPV6;
@@ -2255,7 +2260,9 @@ netdev_dpdk_prep_hwol_packet(struct netdev_dpdk *dev, struct rte_mbuf *mbuf)
         } else if (l4_proto == IPPROTO_UDP) {
             if (mbuf->pkt_len > (tso_segsz + ETHER_VLAN_HDR_MAX_LEN)) {
                 mbuf->ol_flags |= PKT_TX_UDP_SEG;
-                mbuf->ol_flags |= PKT_TX_UDP_CKSUM;
+                if (!is_v4_frag) {
+                    mbuf->ol_flags |= PKT_TX_UDP_CKSUM;
+                }
             }
         }
         if (mbuf->pkt_len > (tso_segsz + ETHER_VLAN_HDR_MAX_LEN)) {
diff --git a/lib/netdev-linux.c b/lib/netdev-linux.c
index 46507da64..7ecdd379a 100644
--- a/lib/netdev-linux.c
+++ b/lib/netdev-linux.c
@@ -7119,6 +7119,7 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
     int l2_len;
     int l3_len = 0;
     int l4_len = 0;
+    bool is_v4_frag = true;
 
     eth_hdr = dp_packet_at(b, 0, ETH_HEADER_LEN);
     if (!eth_hdr) {
@@ -7151,6 +7152,9 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
         l4proto = ip_hdr->ip_proto;
         dp_packet_hwol_set_tx_ipv4(b);
         l3_len = IP_HEADER_LEN;
+        if (!IP_IS_FRAGMENT(ip_hdr->ip_frag_off)) {
+             is_v4_frag = false;
+        }
     } else if (eth_type == htons(ETH_TYPE_IPV6)) {
         nh6 = dp_packet_at(b, l2_len, IPV6_HEADER_LEN);
         if (!nh6) {
@@ -7197,7 +7201,9 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
         if (dp_packet_size(b) > mtu + l2_len) {
             dp_packet_hwol_set_udp_seg(b);
         }
-        dp_packet_hwol_set_csum_udp(b);
+        if (!is_v4_frag) {
+            dp_packet_hwol_set_csum_udp(b);
+        }
     }
 }
 
@@ -7227,9 +7233,17 @@ netdev_linux_prepend_vnet_hdr(struct dp_packet *b, int mtu OVS_UNUSED)
                             + dp_packet_hwol_get_l4_len(b);
 
         vnet->hdr_len = (OVS_FORCE __virtio16)hdr_len;
-        vnet->gso_size = (OVS_FORCE __virtio16)(tso_segsz - hdr_len);
+        /* gso_size = MTU - l3_len - l4_len */
+        vnet->gso_size = (OVS_FORCE __virtio16)(tso_segsz - hdr_len
+                              + dp_packet_hwol_get_l2_len(b));
         if (dp_packet_hwol_is_ufo(b)) {
             vnet->gso_type = VIRTIO_NET_HDR_GSO_UDP;
+            /* For UDP, header of IP fragment won't include UDP header except
+             * the first one, so hdr_len and gso_size shouldn't include
+             * l4_len.
+             */
+            vnet->hdr_len -= dp_packet_hwol_get_l4_len(b);
+            vnet->gso_size += dp_packet_hwol_get_l4_len(b);
         } else if (dp_packet_hwol_is_ipv4(b)) {
             vnet->gso_type = VIRTIO_NET_HDR_GSO_TCPV4;
         } else {
-- 
2.17.1

