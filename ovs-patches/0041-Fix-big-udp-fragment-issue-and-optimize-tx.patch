From b3266ee787422f28d571c3b1e163db5144374281 Mon Sep 17 00:00:00 2001
From: Yi Yang <yangyi01@inspur.com>
Date: Thu, 14 Jan 2021 03:05:39 -0500
Subject: [PATCH 41/47] Fix big udp fragment issue and optimize tx

Note: tap and veth can't work for big udp fragment.
prepend_vnet is optimized and remove unnecessary parse.

Signed-off-by: Yi Yang <yangyi01@inspur.com>
---
 lib/netdev-linux.c | 111 +++++++++++++++++++++++++++++++--------------
 1 file changed, 77 insertions(+), 34 deletions(-)

diff --git a/lib/netdev-linux.c b/lib/netdev-linux.c
index 04c9b75b4..f270464be 100644
--- a/lib/netdev-linux.c
+++ b/lib/netdev-linux.c
@@ -7020,6 +7020,8 @@ netdev_linux_parse_l2(struct dp_packet *b, uint16_t *l4proto)
     int l2_len;
     int l3_len = 0;
     int l4_len = 0;
+    bool is_frag = true;
+    uint16_t offset = 0;
 
     eth_hdr = dp_packet_at(b, 0, ETH_HEADER_LEN);
     if (!eth_hdr) {
@@ -7051,6 +7053,11 @@ netdev_linux_parse_l2(struct dp_packet *b, uint16_t *l4proto)
         l3_len = IP_HEADER_LEN;
         *l4proto = ip_hdr->ip_proto;
         dp_packet_hwol_set_tx_ipv4(b);
+        if (!IP_IS_FRAGMENT(ip_hdr->ip_frag_off)) {
+            is_frag = false;
+        } else {
+            offset = ntohs(ip_hdr->ip_frag_off) & IP_FRAG_OFF_MASK;
+        }
     } else if (eth_type == htons(ETH_TYPE_IPV6)) {
         struct ovs_16aligned_ip6_hdr *nh6;
 
@@ -7062,6 +7069,14 @@ netdev_linux_parse_l2(struct dp_packet *b, uint16_t *l4proto)
         l3_len = IPV6_HEADER_LEN;
         *l4proto = nh6->ip6_ctlun.ip6_un1.ip6_un1_nxt;
         dp_packet_hwol_set_tx_ipv6(b);
+        if (*l4proto == IPPROTO_FRAGMENT) {
+            struct ovs_16aligned_ip6_frag *frag_hdr
+                = ALIGNED_CAST(struct ovs_16aligned_ip6_frag *,
+                               nh6 + 1);
+            *l4proto = frag_hdr->ip6f_nxt;
+        } else {
+            is_frag = false;
+        }
     }
 
     dp_packet_hwol_set_l3_len(b, l3_len);
@@ -7077,14 +7092,18 @@ netdev_linux_parse_l2(struct dp_packet *b, uint16_t *l4proto)
         l4_len = TCP_OFFSET(tcp_hdr->tcp_ctl) * 4;
         dp_packet_hwol_set_l4_len(b, l4_len);
     } else if (*l4proto == IPPROTO_UDP) {
-        struct udp_header *udp_hdr =  dp_packet_at(b, l2_len + l3_len,
-                                          sizeof(struct udp_header));
+        if (!is_frag || (offset == 0)) {
+            struct udp_header *udp_hdr =  dp_packet_at(b, l2_len + l3_len,
+                                              sizeof(struct udp_header));
 
-        if (!udp_hdr) {
-            return -EINVAL;
-        }
+            if (!udp_hdr) {
+                return -EINVAL;
+            }
 
-        l4_len = sizeof(struct udp_header);
+            l4_len = sizeof(struct udp_header);
+        } else {
+            l4_len = 0;
+        }
         dp_packet_hwol_set_l4_len(b, l4_len);
     }
 
@@ -7144,7 +7163,9 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
     int l2_len;
     int l3_len = 0;
     int l4_len = 0;
-    bool is_v4_frag = true;
+    bool is_frag = true;
+    uint16_t offset = 0;
+    bool set_cksum = false;
 
     eth_hdr = dp_packet_at(b, 0, ETH_HEADER_LEN);
     if (!eth_hdr) {
@@ -7164,6 +7185,13 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
         l2_len += VLAN_HEADER_LEN;
     }
 
+    dp_packet_hwol_set_l2_len(b, l2_len);
+
+    if ((dp_packet_size(b) > mtu + l2_len)
+        && !dp_packet_hwol_l4_mask(b)) {
+        set_cksum = true;
+    }
+
     if (eth_type == htons(ETH_TYPE_IP)) {
         ip_hdr = dp_packet_at(b, l2_len, IP_HEADER_LEN);
 
@@ -7172,13 +7200,17 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
         }
 
         dp_packet_set_l3(b, ip_hdr);
-        ip_hdr->ip_csum = 0;
-        ip_hdr->ip_csum = csum(ip_hdr, sizeof *ip_hdr);
+        if (set_cksum) {
+            ip_hdr->ip_csum = 0;
+            ip_hdr->ip_csum = csum(ip_hdr, sizeof *ip_hdr);
+        }
         l4proto = ip_hdr->ip_proto;
         dp_packet_hwol_set_tx_ipv4(b);
         l3_len = IP_HEADER_LEN;
         if (!IP_IS_FRAGMENT(ip_hdr->ip_frag_off)) {
-             is_v4_frag = false;
+            is_frag = false;
+        } else {
+            offset = ntohs(ip_hdr->ip_frag_off) & IP_FRAG_OFF_MASK;
         }
     } else if (eth_type == htons(ETH_TYPE_IPV6)) {
         nh6 = dp_packet_at(b, l2_len, IPV6_HEADER_LEN);
@@ -7190,8 +7222,18 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
         l4proto = nh6->ip6_ctlun.ip6_un1.ip6_un1_nxt;
         dp_packet_hwol_set_tx_ipv6(b);
         l3_len = IPV6_HEADER_LEN;
+        if (l4proto == IPPROTO_FRAGMENT) {
+            struct ovs_16aligned_ip6_frag *frag_hdr
+                = ALIGNED_CAST(struct ovs_16aligned_ip6_frag *,
+                               nh6 + 1);
+            l4proto = frag_hdr->ip6f_nxt;
+        } else {
+            is_frag = false;
+        }
     }
 
+    dp_packet_hwol_set_l3_len(b, l3_len);
+
     if (l4proto == IPPROTO_TCP) {
         /* Note: need set tcp pseudo checksum */
         struct tcp_header *tcp_hdr =  dp_packet_at(b, l2_len + l3_len,
@@ -7204,31 +7246,38 @@ netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
         dp_packet_hwol_set_l4_len(b, l4_len);
         dp_packet_set_l4(b, tcp_hdr);
 
-        if (l3_len == IP_HEADER_LEN) {
-            tcp_hdr->tcp_csum = packet_csum_pseudoheader(ip_hdr);
-        } else {
-            tcp_hdr->tcp_csum = packet_csum_pseudoheader6(nh6);
-        }
-        if (dp_packet_size(b) > mtu + l2_len) {
+        if (set_cksum) {
+            if (l3_len == IP_HEADER_LEN) {
+                tcp_hdr->tcp_csum = packet_csum_pseudoheader(ip_hdr);
+            } else {
+                tcp_hdr->tcp_csum = packet_csum_pseudoheader6(nh6);
+            }
+            dp_packet_hwol_set_csum_tcp(b);
             dp_packet_hwol_set_tcp_seg(b);
         }
-        dp_packet_hwol_set_csum_tcp(b);
     } else if (l4proto == IPPROTO_UDP) {
-        struct udp_header *udp_hdr =  dp_packet_at(b, l2_len + l3_len,
-                                          sizeof(struct udp_header));
+        if (!is_frag || (offset = 0)) {
+            struct udp_header *udp_hdr =  dp_packet_at(b, l2_len + l3_len,
+                                              sizeof(struct udp_header));
 
-        if (!udp_hdr) {
-            return;
+            if (!udp_hdr) {
+                return;
+            }
+            l4_len = sizeof(struct udp_header);
+            dp_packet_set_l4(b, udp_hdr);
+            if (!is_frag) {
+                dp_packet_hwol_set_csum_udp(b);
+            } else {
+                udp_hdr->udp_csum = 0;
+            }
+        } else {
+            l4_len = 0;
+            dp_packet_set_l4(b, (char *)dp_packet_l3(b) + l3_len);
         }
-        l4_len = sizeof(struct udp_header);
         dp_packet_hwol_set_l4_len(b, l4_len);
-        dp_packet_set_l4(b, udp_hdr);
-        if (dp_packet_size(b) > mtu + l2_len) {
+        if (set_cksum) {
             dp_packet_hwol_set_udp_seg(b);
         }
-        if (!is_v4_frag) {
-            dp_packet_hwol_set_csum_udp(b);
-        }
     }
 }
 
@@ -7237,19 +7286,13 @@ netdev_linux_prepend_vnet_hdr(struct dp_packet *b, int mtu OVS_UNUSED)
 {
     struct virtio_net_hdr *vnet;
     uint16_t tso_segsz = get_userspace_tso_segsz();
-    uint16_t l4proto;
-
-    netdev_linux_parse_l2(b, &l4proto);
 
     /* ol_flags weren't set correctly for received packets which are from
      * physical port and GROed, so it has to been set again in order that
      * vnet_hdr can be prepended correctly. Note: here tso_segsz but not
      * mtu are used because tso_segsz may be less than mtu.
      */
-    if ((dp_packet_size(b) > tso_segsz + dp_packet_hwol_get_l2_len(b))
-        && !dp_packet_hwol_l4_mask(b)) {
-        netdev_linux_set_ol_flags_and_cksum(b, tso_segsz);
-    }
+    netdev_linux_set_ol_flags_and_cksum(b, tso_segsz);
 
     vnet = dp_packet_push_zeros(b, sizeof *vnet);
 
-- 
2.17.1

