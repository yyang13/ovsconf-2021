From 407eba53e6f9c4b14902e01ab901d7b8789917cb Mon Sep 17 00:00:00 2001
From: Yi Yang <yangyi01@inspur.com>
Date: Tue, 25 Aug 2020 05:25:47 -0400
Subject: [PATCH 12/47] Fix tcp-to-veth issue

Note: 1. tcp pseudo checksum must be set for big GROed
         packet.
      2. packet from vhostuser isn't parsed, so must
         call parse_l2 before call prepen vnet.

Signed-off-by: Yi Yang <yangyi01@inspur.com>
---
 lib/netdev-linux.c | 73 ++++++++++++++++++++++++++++++++++------------
 1 file changed, 55 insertions(+), 18 deletions(-)

diff --git a/lib/netdev-linux.c b/lib/netdev-linux.c
index f4d2eee92..7c9162b0e 100644
--- a/lib/netdev-linux.c
+++ b/lib/netdev-linux.c
@@ -81,6 +81,7 @@
 #include "openvswitch/vlog.h"
 #include "userspace-sock-buf-size.h"
 #include "userspace-tso.h"
+#include "userspace-tso-segsz.h"
 #include "util.h"
 
 VLOG_DEFINE_THIS_MODULE(netdev_linux);
@@ -1653,19 +1654,16 @@ netdev_linux_sock_batch_send(int sock, int ifindex, bool tso, int mtu,
 
     struct dp_packet *packet;
     DP_PACKET_BATCH_FOR_EACH (i, packet, batch) {
-        if (tso) {
-            netdev_linux_prepend_vnet_hdr(packet, mtu);
-        }
         /* It is a GROed packet which has multiple segments, so need to merge
          * as a big packet in order that sendmmsg can handle it correctly.
          */
         if (packet->mbuf.nb_segs > 1) {
             struct dp_packet *new_packet =
-                                 dp_packet_new(dp_packet_size(packet));
+                dp_packet_new_with_headroom(dp_packet_size(packet),
+                                            sizeof(struct virtio_net_hdr));
             struct rte_mbuf *next = (struct rte_mbuf *)packet;
             uint32_t offset = 0;
 
-            iov[i].iov_base = dp_packet_data(new_packet);
             /* Copy multi-seg mbuf data to linear buffer */
             while (next) {
                 memcpy((uint8_t *)dp_packet_data(new_packet) + offset,
@@ -1678,9 +1676,11 @@ netdev_linux_sock_batch_send(int sock, int ifindex, bool tso, int mtu,
             dp_packet_delete(packet);
             batch->packets[i] = new_packet;
             packet = new_packet;
-        } else {
-            iov[i].iov_base = dp_packet_data(packet);
         }
+        if (tso) {
+            netdev_linux_prepend_vnet_hdr(packet, mtu);
+        }
+        iov[i].iov_base = dp_packet_data(packet);
         iov[i].iov_len = dp_packet_size(packet);
         mmsg[i].msg_hdr = (struct msghdr) { .msg_name = &sll,
                                             .msg_namelen = sizeof sll,
@@ -7086,12 +7086,16 @@ netdev_linux_parse_vnet_hdr(struct dp_packet *b)
 }
 
 static void
-netdev_linux_set_ol_flags_and_ip_cksum(struct dp_packet *b, int mtu)
+netdev_linux_set_ol_flags_and_cksum(struct dp_packet *b, int mtu)
 {
     struct eth_header *eth_hdr;
+    struct ip_header *ip_hdr = NULL;
+    struct ovs_16aligned_ip6_hdr *nh6 = NULL;
     uint16_t l4proto = 0;
     ovs_be16 eth_type;
     int l2_len;
+    int l3_len = 0;
+    int l4_len = 0;
 
     eth_hdr = dp_packet_at(b, 0, ETH_HEADER_LEN);
     if (!eth_hdr) {
@@ -7112,35 +7116,61 @@ netdev_linux_set_ol_flags_and_ip_cksum(struct dp_packet *b, int mtu)
     }
 
     if (eth_type == htons(ETH_TYPE_IP)) {
-        struct ip_header *ip_hdr = dp_packet_at(b, l2_len, IP_HEADER_LEN);
+        ip_hdr = dp_packet_at(b, l2_len, IP_HEADER_LEN);
 
         if (!ip_hdr) {
             return;
         }
 
+        dp_packet_set_l3(b, ip_hdr);
         ip_hdr->ip_csum = 0;
         ip_hdr->ip_csum = csum(ip_hdr, sizeof *ip_hdr);
         l4proto = ip_hdr->ip_proto;
         dp_packet_hwol_set_tx_ipv4(b);
+        l3_len = IP_HEADER_LEN;
     } else if (eth_type == htons(ETH_TYPE_IPV6)) {
-        struct ovs_16aligned_ip6_hdr *nh6;
-
         nh6 = dp_packet_at(b, l2_len, IPV6_HEADER_LEN);
         if (!nh6) {
             return;
         }
 
+        dp_packet_set_l3(b, nh6);
         l4proto = nh6->ip6_ctlun.ip6_un1.ip6_un1_nxt;
         dp_packet_hwol_set_tx_ipv6(b);
+        l3_len = IPV6_HEADER_LEN;
     }
 
     if (l4proto == IPPROTO_TCP) {
-        /* Note: needn't set tcp checksum */
+        /* Note: need set tcp pseudo checksum */
+        struct tcp_header *tcp_hdr =  dp_packet_at(b, l2_len + l3_len,
+                                          sizeof(struct tcp_header));
+
+        if (!tcp_hdr) {
+            return;
+        }
+        l4_len = TCP_OFFSET(tcp_hdr->tcp_ctl) * 4;
+        dp_packet_hwol_set_l4_len(b, l4_len);
+        dp_packet_set_l4(b, tcp_hdr);
+
+        if (l3_len == IP_HEADER_LEN) {
+            tcp_hdr->tcp_csum = packet_csum_pseudoheader(ip_hdr);
+        } else {
+            tcp_hdr->tcp_csum = packet_csum_pseudoheader6(nh6);
+        }
         if (dp_packet_size(b) > mtu + b->mbuf.l2_len) {
             dp_packet_hwol_set_tcp_seg(b);
         }
         dp_packet_hwol_set_csum_tcp(b);
     } else if (l4proto == IPPROTO_UDP) {
+        struct udp_header *udp_hdr =  dp_packet_at(b, l2_len + l3_len,
+                                          sizeof(struct udp_header));
+
+        if (!udp_hdr) {
+            return;
+        }
+        l4_len = sizeof(struct udp_header);
+        dp_packet_hwol_set_l4_len(b, l4_len);
+        dp_packet_set_l4(b, udp_hdr);
         if (dp_packet_size(b) > mtu + b->mbuf.l2_len) {
             dp_packet_hwol_set_udp_seg(b);
         }
@@ -7149,17 +7179,25 @@ netdev_linux_set_ol_flags_and_ip_cksum(struct dp_packet *b, int mtu)
 }
 
 static void
-netdev_linux_prepend_vnet_hdr(struct dp_packet *b, int mtu)
+netdev_linux_prepend_vnet_hdr(struct dp_packet *b, int mtu OVS_UNUSED)
 {
     struct virtio_net_hdr *vnet;
+    uint16_t tso_segsz = get_userspace_tso_segsz();
+
+    /* Parse it if it is from vhostuser because it isn't parsed */
+    if (b->mbuf.port == UINT16_MAX) {
+        uint16_t l4proto;
+        netdev_linux_parse_l2(b, &l4proto);
+    }
 
     /* ol_flags weren't set correctly for received packets which are from
      * physical port and GROed, so it has to been set again in order that
-     * vnet_hdr can be prepended correctly.
+     * vnet_hdr can be prepended correctly. Note: here tso_segsz but not
+     * mtu are used because tso_segsz may be less than mtu.
      */
-    if ((dp_packet_size(b) > mtu + b->mbuf.l2_len)
+    if ((dp_packet_size(b) > tso_segsz + b->mbuf.l2_len)
         && !dp_packet_hwol_l4_mask(b)) {
-        netdev_linux_set_ol_flags_and_ip_cksum(b, mtu);
+        netdev_linux_set_ol_flags_and_cksum(b, tso_segsz);
     }
 
     vnet = dp_packet_push_zeros(b, sizeof *vnet);
@@ -7169,7 +7207,7 @@ netdev_linux_prepend_vnet_hdr(struct dp_packet *b, int mtu)
                             + b->mbuf.l4_len;
 
         vnet->hdr_len = (OVS_FORCE __virtio16)hdr_len;
-        vnet->gso_size = (OVS_FORCE __virtio16)(mtu - hdr_len);
+        vnet->gso_size = (OVS_FORCE __virtio16)(tso_segsz - hdr_len);
         if (dp_packet_hwol_is_uso(b)) {
             vnet->gso_type = VIRTIO_NET_HDR_GSO_UDP;
         } else if (dp_packet_hwol_is_ipv4(b)) {
@@ -7177,7 +7215,6 @@ netdev_linux_prepend_vnet_hdr(struct dp_packet *b, int mtu)
         } else {
             vnet->gso_type = VIRTIO_NET_HDR_GSO_TCPV6;
         }
-
     } else {
         vnet->flags = VIRTIO_NET_HDR_GSO_NONE;
     }
-- 
2.17.1

