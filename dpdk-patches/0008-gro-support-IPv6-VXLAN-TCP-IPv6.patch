From b02876e68d2d9a5a8c9dc14dff43ff8cefdea0e9 Mon Sep 17 00:00:00 2001
From: Yi Yang <yangyi01@inspur.com>
Date: Sun, 20 Dec 2020 21:10:42 -0500
Subject: [PATCH 08/19] gro: support IPv6 VXLAN TCP/IPv6

IPv6 VXLAN TCP/IPv6 GRO can help improve TCP/IPv6 performance
in IPv6 VXLAN use case.

With this enabled in DPDK, OVS DPDK can leverage it to improve
VM-to-VM TCP/IPv6 performance, it will merge small adjacent
IPv6 VXLAN TCP/IPv6 packets to a big IPv6 VXLAN TCP/IPv6 packet
immediate after they are received from a physical NIC. It is
very helpful in OVS DPDK IPv6 VXLAN use case.

Signed-off-by: Yi Yang <yangyi01@inspur.com>
---
 .../generic_receive_offload_lib.rst           |   2 +-
 lib/librte_gro/Makefile                       |   1 +
 lib/librte_gro/gro_vxlan6_tcp6.c              | 464 ++++++++++++++++++
 lib/librte_gro/gro_vxlan6_tcp6.h              | 153 ++++++
 lib/librte_gro/meson.build                    |   2 +-
 lib/librte_gro/rte_gro.c                      |  87 +++-
 lib/librte_gro/rte_gro.h                      |   3 +
 7 files changed, 702 insertions(+), 10 deletions(-)
 create mode 100644 lib/librte_gro/gro_vxlan6_tcp6.c
 create mode 100644 lib/librte_gro/gro_vxlan6_tcp6.h

diff --git a/doc/guides/prog_guide/generic_receive_offload_lib.rst b/doc/guides/prog_guide/generic_receive_offload_lib.rst
index a822eaf698..0efade31aa 100644
--- a/doc/guides/prog_guide/generic_receive_offload_lib.rst
+++ b/doc/guides/prog_guide/generic_receive_offload_lib.rst
@@ -33,7 +33,7 @@ fragmentation is possible (i.e., DF==0). Additionally, it complies RFC
 Currently, the GRO library provides GRO supports for TCP/IPv4, UDP/IPv4,
 and TCP/IPv6 packets as well as VxLAN packets which contain an outer IPv4
 header and an inner TCP/IPv4, UDP/IPv4 or TCP/IPv6 packet or an outer IPv6
-header and an inner TCP/IPv4 packet.
+header and an inner TCP/IPv4 or TCP/IPv6 packet.
 
 Two Sets of API
 ---------------
diff --git a/lib/librte_gro/Makefile b/lib/librte_gro/Makefile
index ffcae39267..5b00aaefaf 100644
--- a/lib/librte_gro/Makefile
+++ b/lib/librte_gro/Makefile
@@ -21,6 +21,7 @@ SRCS-$(CONFIG_RTE_LIBRTE_GRO) += gro_vxlan_udp4.c
 SRCS-$(CONFIG_RTE_LIBRTE_GRO) += gro_tcp6.c
 SRCS-$(CONFIG_RTE_LIBRTE_GRO) += gro_vxlan_tcp6.c
 SRCS-$(CONFIG_RTE_LIBRTE_GRO) += gro_vxlan6_tcp4.c
+SRCS-$(CONFIG_RTE_LIBRTE_GRO) += gro_vxlan6_tcp6.c
 
 # install this header file
 SYMLINK-$(CONFIG_RTE_LIBRTE_GRO)-include += rte_gro.h
diff --git a/lib/librte_gro/gro_vxlan6_tcp6.c b/lib/librte_gro/gro_vxlan6_tcp6.c
new file mode 100644
index 0000000000..5b9dee447b
--- /dev/null
+++ b/lib/librte_gro/gro_vxlan6_tcp6.c
@@ -0,0 +1,464 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2021 Inspur Corporation
+ */
+
+#include <rte_malloc.h>
+#include <rte_mbuf.h>
+#include <rte_cycles.h>
+#include <rte_ethdev.h>
+#include <rte_udp.h>
+
+#include "gro_vxlan6_tcp6.h"
+
+void *
+gro_vxlan6_tcp6_tbl_create(uint16_t socket_id,
+		uint16_t max_flow_num,
+		uint16_t max_item_per_flow)
+{
+	struct gro_vxlan6_tcp6_tbl *tbl;
+	size_t size;
+	uint32_t entries_num, i;
+
+	entries_num = max_flow_num * max_item_per_flow;
+	entries_num = RTE_MIN(entries_num, GRO_VXLAN6_TCP6_TBL_MAX_ITEM_NUM);
+
+	if (entries_num == 0)
+		return NULL;
+
+	tbl = rte_zmalloc_socket(__func__,
+			sizeof(struct gro_vxlan6_tcp6_tbl),
+			RTE_CACHE_LINE_SIZE,
+			socket_id);
+	if (tbl == NULL)
+		return NULL;
+
+	size = sizeof(struct gro_vxlan6_tcp6_item) * entries_num;
+	tbl->items = rte_zmalloc_socket(__func__,
+			size,
+			RTE_CACHE_LINE_SIZE,
+			socket_id);
+	if (tbl->items == NULL) {
+		rte_free(tbl);
+		return NULL;
+	}
+	tbl->max_item_num = entries_num;
+
+	size = sizeof(struct gro_vxlan6_tcp6_flow) * entries_num;
+	tbl->flows = rte_zmalloc_socket(__func__,
+			size,
+			RTE_CACHE_LINE_SIZE,
+			socket_id);
+	if (tbl->flows == NULL) {
+		rte_free(tbl->items);
+		rte_free(tbl);
+		return NULL;
+	}
+
+	for (i = 0; i < entries_num; i++)
+		tbl->flows[i].start_index = INVALID_ARRAY_INDEX;
+	tbl->max_flow_num = entries_num;
+
+	return tbl;
+}
+
+void
+gro_vxlan6_tcp6_tbl_destroy(void *tbl)
+{
+	struct gro_vxlan6_tcp6_tbl *vxlan6_tbl = tbl;
+
+	if (vxlan6_tbl) {
+		rte_free(vxlan6_tbl->items);
+		rte_free(vxlan6_tbl->flows);
+	}
+	rte_free(vxlan6_tbl);
+}
+
+static inline uint32_t
+find_an_empty_item(struct gro_vxlan6_tcp6_tbl *tbl)
+{
+	uint32_t max_item_num = tbl->max_item_num, i;
+
+	for (i = 0; i < max_item_num; i++)
+		if (tbl->items[i].inner_item.firstseg == NULL)
+			return i;
+	return INVALID_ARRAY_INDEX;
+}
+
+static inline uint32_t
+find_an_empty_flow(struct gro_vxlan6_tcp6_tbl *tbl)
+{
+	uint32_t max_flow_num = tbl->max_flow_num, i;
+
+	for (i = 0; i < max_flow_num; i++)
+		if (tbl->flows[i].start_index == INVALID_ARRAY_INDEX)
+			return i;
+	return INVALID_ARRAY_INDEX;
+}
+
+static inline uint32_t
+insert_new_item(struct gro_vxlan6_tcp6_tbl *tbl,
+		struct rte_mbuf *pkt,
+		uint64_t start_time,
+		uint32_t prev_idx,
+		uint32_t sent_seq)
+{
+	uint32_t item_idx;
+
+	item_idx = find_an_empty_item(tbl);
+	if (unlikely(item_idx == INVALID_ARRAY_INDEX))
+		return INVALID_ARRAY_INDEX;
+
+	tbl->items[item_idx].inner_item.firstseg = pkt;
+	tbl->items[item_idx].inner_item.lastseg = rte_pktmbuf_lastseg(pkt);
+	tbl->items[item_idx].inner_item.start_time = start_time;
+	tbl->items[item_idx].inner_item.next_pkt_idx = INVALID_ARRAY_INDEX;
+	tbl->items[item_idx].inner_item.sent_seq = sent_seq;
+	tbl->items[item_idx].inner_item.nb_merged = 1;
+	tbl->item_num++;
+
+	/* If the previous packet exists, chain the new one with it. */
+	if (prev_idx != INVALID_ARRAY_INDEX) {
+		tbl->items[item_idx].inner_item.next_pkt_idx =
+			tbl->items[prev_idx].inner_item.next_pkt_idx;
+		tbl->items[prev_idx].inner_item.next_pkt_idx = item_idx;
+	}
+
+	return item_idx;
+}
+
+static inline uint32_t
+delete_item(struct gro_vxlan6_tcp6_tbl *tbl,
+		uint32_t item_idx,
+		uint32_t prev_item_idx)
+{
+	uint32_t next_idx = tbl->items[item_idx].inner_item.next_pkt_idx;
+
+	/* NULL indicates an empty item. */
+	tbl->items[item_idx].inner_item.firstseg = NULL;
+	tbl->item_num--;
+	if (prev_item_idx != INVALID_ARRAY_INDEX)
+		tbl->items[prev_item_idx].inner_item.next_pkt_idx = next_idx;
+
+	return next_idx;
+}
+
+static inline uint32_t
+insert_new_flow(struct gro_vxlan6_tcp6_tbl *tbl,
+		struct vxlan6_tcp6_flow_key *src,
+		uint32_t item_idx)
+{
+	struct vxlan6_tcp6_flow_key *dst;
+	uint32_t flow_idx;
+
+	flow_idx = find_an_empty_flow(tbl);
+	if (unlikely(flow_idx == INVALID_ARRAY_INDEX))
+		return INVALID_ARRAY_INDEX;
+
+	dst = &(tbl->flows[flow_idx].key);
+
+	rte_ether_addr_copy(&(src->inner_key.eth_saddr),
+			&(dst->inner_key.eth_saddr));
+	rte_ether_addr_copy(&(src->inner_key.eth_daddr),
+			&(dst->inner_key.eth_daddr));
+	gro_ipv6_addr_copy(src->inner_key.ip_saddr, dst->inner_key.ip_saddr);
+	gro_ipv6_addr_copy(src->inner_key.ip_daddr, dst->inner_key.ip_daddr);
+	dst->inner_key.recv_ack = src->inner_key.recv_ack;
+	dst->inner_key.src_port = src->inner_key.src_port;
+	dst->inner_key.dst_port = src->inner_key.dst_port;
+
+	dst->vxlan_hdr.vx_flags = src->vxlan_hdr.vx_flags;
+	dst->vxlan_hdr.vx_vni = src->vxlan_hdr.vx_vni;
+	rte_ether_addr_copy(&(src->outer_eth_saddr), &(dst->outer_eth_saddr));
+	rte_ether_addr_copy(&(src->outer_eth_daddr), &(dst->outer_eth_daddr));
+	gro_ipv6_addr_copy(src->outer_ip_saddr, dst->outer_ip_saddr);
+	gro_ipv6_addr_copy(src->outer_ip_daddr, dst->outer_ip_daddr);
+	dst->outer_src_port = src->outer_src_port;
+	dst->outer_dst_port = src->outer_dst_port;
+
+	tbl->flows[flow_idx].start_index = item_idx;
+	tbl->flow_num++;
+
+	return flow_idx;
+}
+
+static inline int
+is_same_vxlan6_tcp6_flow(struct vxlan6_tcp6_flow_key k1,
+		struct vxlan6_tcp6_flow_key k2)
+{
+	return (rte_is_same_ether_addr(&k1.outer_eth_saddr,
+					&k2.outer_eth_saddr) &&
+			rte_is_same_ether_addr(&k1.outer_eth_daddr,
+				&k2.outer_eth_daddr) &&
+			rte_is_same_ipv6_addr(k1.outer_ip_saddr,
+					      k2.outer_ip_saddr) &&
+			rte_is_same_ipv6_addr(k1.outer_ip_daddr,
+					      k2.outer_ip_daddr) &&
+			(k1.outer_src_port == k2.outer_src_port) &&
+			(k1.outer_dst_port == k2.outer_dst_port) &&
+			(k1.vxlan_hdr.vx_flags == k2.vxlan_hdr.vx_flags) &&
+			(k1.vxlan_hdr.vx_vni == k2.vxlan_hdr.vx_vni) &&
+			is_same_tcp6_flow(k1.inner_key, k2.inner_key));
+}
+
+static inline int
+check_vxlan_seq_option_v6(struct gro_vxlan6_tcp6_item *item,
+		struct rte_tcp_hdr *tcp_hdr,
+		uint32_t sent_seq,
+		uint16_t tcp_hl,
+		uint16_t tcp_dl)
+{
+	struct rte_mbuf *pkt = item->inner_item.firstseg;
+	int cmp;
+	uint16_t l2_offset;
+
+	l2_offset = pkt->outer_l2_len + pkt->outer_l3_len;
+	cmp = check_seq_option_v6(&item->inner_item, tcp_hdr, sent_seq,
+			tcp_hl, tcp_dl, l2_offset);
+	if (cmp > 0)
+		/* Append the new packet. */
+		return 1;
+	else if (cmp < 0)
+		/* Prepend the new packet. */
+		return -1;
+
+	return 0;
+}
+
+static inline int
+merge_two_vxlan6_tcp6_packets(struct gro_vxlan6_tcp6_item *item,
+		struct rte_mbuf *pkt,
+		int cmp,
+		uint32_t sent_seq)
+{
+	if (merge_two_tcp6_packets(&item->inner_item, pkt, cmp, sent_seq,
+				pkt->outer_l2_len +
+				pkt->outer_l3_len))
+		return 1;
+
+	return 0;
+}
+
+static inline void
+update_vxlan6_header(struct gro_vxlan6_tcp6_item *item)
+{
+	struct rte_ipv6_hdr *ipv6_hdr;
+	struct rte_udp_hdr *udp_hdr;
+	struct rte_mbuf *pkt = item->inner_item.firstseg;
+	uint16_t len;
+
+	/* Update the outer IPv6 header. */
+	len = pkt->pkt_len - pkt->outer_l2_len;
+	ipv6_hdr = (struct rte_ipv6_hdr *)(rte_pktmbuf_mtod(pkt, char *) +
+			pkt->outer_l2_len);
+	ipv6_hdr->payload_len = rte_cpu_to_be_16(len - pkt->outer_l3_len);
+
+	/* Update the outer UDP header. */
+	len -= pkt->outer_l3_len;
+	udp_hdr = (struct rte_udp_hdr *)((char *)ipv6_hdr + pkt->outer_l3_len);
+	udp_hdr->dgram_len = rte_cpu_to_be_16(len);
+
+	/* Update the inner IPv6 header. */
+	len -= pkt->l2_len;
+	ipv6_hdr = (struct rte_ipv6_hdr *)((char *)udp_hdr + pkt->l2_len);
+	/* IPv6 payload_len does not include IPv6 header. */
+	ipv6_hdr->payload_len = rte_cpu_to_be_16(len - pkt->l3_len);
+}
+
+int32_t
+gro_vxlan6_tcp6_reassemble(struct rte_mbuf *pkt,
+		struct gro_vxlan6_tcp6_tbl *tbl,
+		uint64_t start_time)
+{
+	struct rte_ether_hdr *outer_eth_hdr, *eth_hdr;
+	struct rte_ipv6_hdr *outer_ipv6_hdr;
+	struct rte_ipv6_hdr *ipv6_hdr;
+	struct rte_tcp_hdr *tcp_hdr;
+	struct rte_udp_hdr *udp_hdr;
+	struct rte_vxlan_hdr *vxlan_hdr;
+	uint32_t sent_seq;
+	int32_t tcp_dl;
+
+	struct vxlan6_tcp6_flow_key key;
+	uint32_t cur_idx, prev_idx, item_idx;
+	uint32_t i, max_flow_num, remaining_flow_num;
+	int cmp;
+	uint16_t hdr_len;
+	uint8_t find;
+
+	/*
+	 * Don't process the packet whose TCP header length is greater
+	 * than 60 bytes or less than 20 bytes.
+	 */
+	if (unlikely(INVALID_TCP_HDRLEN(pkt->l4_len)))
+		return -1;
+
+	outer_eth_hdr = rte_pktmbuf_mtod(pkt, struct rte_ether_hdr *);
+	outer_ipv6_hdr = (struct rte_ipv6_hdr *)((char *)outer_eth_hdr +
+			pkt->outer_l2_len);
+	udp_hdr = (struct rte_udp_hdr *)((char *)outer_ipv6_hdr +
+			pkt->outer_l3_len);
+	vxlan_hdr = (struct rte_vxlan_hdr *)((char *)udp_hdr +
+			sizeof(struct rte_udp_hdr));
+	eth_hdr = (struct rte_ether_hdr *)((char *)vxlan_hdr +
+			sizeof(struct rte_vxlan_hdr));
+	ipv6_hdr = (struct rte_ipv6_hdr *)((char *)udp_hdr + pkt->l2_len);
+	tcp_hdr = (struct rte_tcp_hdr *)((char *)ipv6_hdr + pkt->l3_len);
+
+	/*
+	 * Don't process the packet which has FIN, SYN, RST, PSH, URG,
+	 * ECE or CWR set.
+	 */
+	if (tcp_hdr->tcp_flags != RTE_TCP_ACK_FLAG)
+		return -1;
+
+	hdr_len = pkt->outer_l2_len + pkt->outer_l3_len + pkt->l2_len +
+		pkt->l3_len + pkt->l4_len;
+	/*
+	 * Don't process the packet whose payload length is less than or
+	 * equal to 0.
+	 */
+	if (pkt->pkt_len <= hdr_len)
+		return -1;
+	tcp_dl = pkt->pkt_len - hdr_len;
+
+	sent_seq = rte_be_to_cpu_32(tcp_hdr->sent_seq);
+
+	rte_ether_addr_copy(&(eth_hdr->s_addr), &(key.inner_key.eth_saddr));
+	rte_ether_addr_copy(&(eth_hdr->d_addr), &(key.inner_key.eth_daddr));
+	gro_ipv6_addr_copy(ipv6_hdr->src_addr, key.inner_key.ip_saddr);
+	gro_ipv6_addr_copy(ipv6_hdr->dst_addr, key.inner_key.ip_daddr);
+	key.inner_key.recv_ack = tcp_hdr->recv_ack;
+	key.inner_key.src_port = tcp_hdr->src_port;
+	key.inner_key.dst_port = tcp_hdr->dst_port;
+
+	key.vxlan_hdr.vx_flags = vxlan_hdr->vx_flags;
+	key.vxlan_hdr.vx_vni = vxlan_hdr->vx_vni;
+	rte_ether_addr_copy(&(outer_eth_hdr->s_addr), &(key.outer_eth_saddr));
+	rte_ether_addr_copy(&(outer_eth_hdr->d_addr), &(key.outer_eth_daddr));
+	gro_ipv6_addr_copy(outer_ipv6_hdr->src_addr, key.outer_ip_saddr);
+	gro_ipv6_addr_copy(outer_ipv6_hdr->dst_addr, key.outer_ip_daddr);
+	key.outer_src_port = udp_hdr->src_port;
+	key.outer_dst_port = udp_hdr->dst_port;
+
+	/* Search for a matched flow. */
+	max_flow_num = tbl->max_flow_num;
+	remaining_flow_num = tbl->flow_num;
+	find = 0;
+	for (i = 0; i < max_flow_num && remaining_flow_num; i++) {
+		if (tbl->flows[i].start_index != INVALID_ARRAY_INDEX) {
+			if (is_same_vxlan6_tcp6_flow(tbl->flows[i].key, key)) {
+				find = 1;
+				break;
+			}
+			remaining_flow_num--;
+		}
+	}
+
+	/*
+	 * Can't find a matched flow. Insert a new flow and store the
+	 * packet into the flow.
+	 */
+	if (find == 0) {
+		item_idx = insert_new_item(tbl, pkt, start_time,
+				INVALID_ARRAY_INDEX, sent_seq);
+		if (item_idx == INVALID_ARRAY_INDEX)
+			return -1;
+		if (insert_new_flow(tbl, &key, item_idx) ==
+				INVALID_ARRAY_INDEX) {
+			/*
+			 * Fail to insert a new flow, so
+			 * delete the inserted packet.
+			 */
+			delete_item(tbl, item_idx, INVALID_ARRAY_INDEX);
+			return -1;
+		}
+		return 0;
+	}
+
+	/* Check all packets in the flow and try to find a neighbor. */
+	cur_idx = tbl->flows[i].start_index;
+	prev_idx = cur_idx;
+	do {
+		cmp = check_vxlan_seq_option_v6(&(tbl->items[cur_idx]), tcp_hdr,
+				sent_seq, pkt->l4_len, tcp_dl);
+		if (cmp) {
+			if (merge_two_vxlan6_tcp6_packets(
+						&(tbl->items[cur_idx]),
+						pkt, cmp, sent_seq))
+				return 1;
+			/*
+			 * Can't merge two packets, as the packet
+			 * length will be greater than the max value.
+			 * Insert the packet into the flow.
+			 */
+			if (insert_new_item(tbl, pkt, start_time, prev_idx,
+						sent_seq) ==
+					INVALID_ARRAY_INDEX)
+				return -1;
+			return 0;
+		}
+		prev_idx = cur_idx;
+		cur_idx = tbl->items[cur_idx].inner_item.next_pkt_idx;
+	} while (cur_idx != INVALID_ARRAY_INDEX);
+
+	/* Can't find neighbor. Insert the packet into the flow. */
+	if (insert_new_item(tbl, pkt, start_time, prev_idx, sent_seq
+				) == INVALID_ARRAY_INDEX)
+		return -1;
+
+	return 0;
+}
+
+uint16_t
+gro_vxlan6_tcp6_tbl_timeout_flush(struct gro_vxlan6_tcp6_tbl *tbl,
+		uint64_t flush_timestamp,
+		struct rte_mbuf **out,
+		uint16_t nb_out)
+{
+	uint16_t k = 0;
+	uint32_t i, j;
+	uint32_t max_flow_num = tbl->max_flow_num;
+
+	for (i = 0; i < max_flow_num; i++) {
+		if (unlikely(tbl->flow_num == 0))
+			return k;
+
+		j = tbl->flows[i].start_index;
+		while (j != INVALID_ARRAY_INDEX) {
+			if (tbl->items[j].inner_item.start_time <=
+					flush_timestamp) {
+				out[k++] = tbl->items[j].inner_item.firstseg;
+				if (tbl->items[j].inner_item.nb_merged > 1)
+					update_vxlan6_header(&(tbl->items[j]));
+				/*
+				 * Delete the item and get the next packet
+				 * index.
+				 */
+				j = delete_item(tbl, j, INVALID_ARRAY_INDEX);
+				tbl->flows[i].start_index = j;
+				if (j == INVALID_ARRAY_INDEX)
+					tbl->flow_num--;
+
+				if (unlikely(k == nb_out))
+					return k;
+			} else
+				/*
+				 * The left packets in the flow won't be
+				 * timeout. Go to check other flows.
+				 */
+				break;
+		}
+	}
+	return k;
+}
+
+uint32_t
+gro_vxlan6_tcp6_tbl_pkt_count(void *tbl)
+{
+	struct gro_vxlan6_tcp6_tbl *gro_tbl = tbl;
+
+	if (gro_tbl)
+		return gro_tbl->item_num;
+
+	return 0;
+}
diff --git a/lib/librte_gro/gro_vxlan6_tcp6.h b/lib/librte_gro/gro_vxlan6_tcp6.h
new file mode 100644
index 0000000000..0659ae442b
--- /dev/null
+++ b/lib/librte_gro/gro_vxlan6_tcp6.h
@@ -0,0 +1,153 @@
+/* SPDX-License-Identifier: BSD-3-Clause
+ * Copyright(c) 2021 Inspur Corporation
+ */
+
+#ifndef _GRO_VXLAN6_TCP6_H_
+#define _GRO_VXLAN6_TCP6_H_
+
+#include "gro_tcp6.h"
+
+#define GRO_VXLAN6_TCP6_TBL_MAX_ITEM_NUM (1024UL * 1024UL)
+
+/* Header fields representing a IPv6 VxLAN flow */
+struct vxlan6_tcp6_flow_key {
+	struct tcp6_flow_key inner_key;
+	struct rte_vxlan_hdr vxlan_hdr;
+
+	struct rte_ether_addr outer_eth_saddr;
+	struct rte_ether_addr outer_eth_daddr;
+
+	uint8_t outer_ip_saddr[16];
+	uint8_t outer_ip_daddr[16];
+
+	/* Outer UDP ports */
+	uint16_t outer_src_port;
+	uint16_t outer_dst_port;
+
+};
+
+struct gro_vxlan6_tcp6_flow {
+	struct vxlan6_tcp6_flow_key key;
+	/*
+	 * The index of the first packet in the flow. INVALID_ARRAY_INDEX
+	 * indicates an empty flow.
+	 */
+	uint32_t start_index;
+};
+
+struct gro_vxlan6_tcp6_item {
+	struct gro_tcp6_item inner_item;
+};
+
+/*
+ * IPv6 VxLAN (with an outer IPv6 header and an inner TCP/IPv6 packet)
+ * reassembly table structure
+ */
+struct gro_vxlan6_tcp6_tbl {
+	/* item array */
+	struct gro_vxlan6_tcp6_item *items;
+	/* flow array */
+	struct gro_vxlan6_tcp6_flow *flows;
+	/* current item number */
+	uint32_t item_num;
+	/* current flow number */
+	uint32_t flow_num;
+	/* the maximum item number */
+	uint32_t max_item_num;
+	/* the maximum flow number */
+	uint32_t max_flow_num;
+};
+
+
+/**
+ * This function creates a IPv6 VxLAN reassembly table for IPv6 VxLAN packets
+ * which have an outer IPv6 header and an inner TCP/IPv6 packet.
+ *
+ * @param socket_id
+ *  Socket index for allocating the table
+ * @param max_flow_num
+ *  The maximum number of flows in the table
+ * @param max_item_per_flow
+ *  The maximum number of packets per flow
+ *
+ * @return
+ *  - Return the table pointer on success.
+ *  - Return NULL on failure.
+ */
+void *gro_vxlan6_tcp6_tbl_create(uint16_t socket_id,
+		uint16_t max_flow_num,
+		uint16_t max_item_per_flow);
+
+/**
+ * This function destroys a IPv6 VxLAN reassembly table.
+ *
+ * @param tbl
+ *  Pointer pointing to the IPv6 VxLAN reassembly table
+ */
+void gro_vxlan6_tcp6_tbl_destroy(void *tbl);
+
+/**
+ * This function merges a IPv6 VxLAN packet which has an outer IPv6 header and
+ * an inner TCP/IPv6 packet. It does not process the packet, whose TCP
+ * header has SYN, FIN, RST, PSH, CWR, ECE or URG bit set, or which
+ * does not have payload.
+ *
+ * This function does not check if the packet has correct checksums and
+ * does not re-calculate checksums for the merged packet. Additionally,
+ * it assumes the packets are complete (i.e., MF==0 && frag_off==0), when
+ * IP fragmentation is possible (i.e., DF==0). It returns the packet, if
+ * the packet has invalid parameters (e.g. SYN bit is set) or there is no
+ * available space in the table.
+ *
+ * @param pkt
+ *  Packet to reassemble
+ * @param tbl
+ *  Pointer pointing to the IPv6 VxLAN reassembly table
+ * @start_time
+ *  The time when the packet is inserted into the table
+ *
+ * @return
+ *  - Return a positive value if the packet is merged.
+ *  - Return zero if the packet isn't merged but stored in the table.
+ *  - Return a negative value for invalid parameters or no available
+ *    space in the table.
+ */
+int32_t gro_vxlan6_tcp6_reassemble(struct rte_mbuf *pkt,
+		struct gro_vxlan6_tcp6_tbl *tbl,
+		uint64_t start_time);
+
+/**
+ * This function flushes timeout packets in the IPv6 VxLAN reassembly table,
+ * and without updating checksums.
+ *
+ * @param tbl
+ *  Pointer pointing to a IPv6 VxLAN GRO table
+ * @param flush_timestamp
+ *  This function flushes packets which are inserted into the table
+ *  before or at the flush_timestamp.
+ * @param out
+ *  Pointer array used to keep flushed packets
+ * @param nb_out
+ *  The element number in 'out'. It also determines the maximum number of
+ *  packets that can be flushed finally.
+ *
+ * @return
+ *  The number of flushed packets
+ */
+uint16_t gro_vxlan6_tcp6_tbl_timeout_flush(struct gro_vxlan6_tcp6_tbl *tbl,
+		uint64_t flush_timestamp,
+		struct rte_mbuf **out,
+		uint16_t nb_out);
+
+/**
+ * This function returns the number of the packets in a IPv6 VxLAN
+ * reassembly table.
+ *
+ * @param tbl
+ *  Pointer pointing to the IPv6 VxLAN reassembly table
+ *
+ * @return
+ *  The number of packets in the table
+ */
+uint32_t gro_vxlan6_tcp6_tbl_pkt_count(void *tbl);
+#endif
diff --git a/lib/librte_gro/meson.build b/lib/librte_gro/meson.build
index 994ee06b78..3eff89c6c2 100644
--- a/lib/librte_gro/meson.build
+++ b/lib/librte_gro/meson.build
@@ -1,6 +1,6 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # Copyright(c) 2017 Intel Corporation
 
-sources = files('rte_gro.c', 'gro_tcp4.c', 'gro_udp4.c', 'gro_vxlan_tcp4.c', 'gro_vxlan_udp4.c', 'gro_tcp6.c', 'gro_vxlan_tcp6.c', 'gro_vxlan6_tcp4.c')
+sources = files('rte_gro.c', 'gro_tcp4.c', 'gro_udp4.c', 'gro_vxlan_tcp4.c', 'gro_vxlan_udp4.c', 'gro_tcp6.c', 'gro_vxlan_tcp6.c', 'gro_vxlan6_tcp4.c', 'gro_vxlan6_tcp6.c')
 headers = files('rte_gro.h')
 deps += ['ethdev']
diff --git a/lib/librte_gro/rte_gro.c b/lib/librte_gro/rte_gro.c
index bfebd1771b..0f8be4114e 100644
--- a/lib/librte_gro/rte_gro.c
+++ b/lib/librte_gro/rte_gro.c
@@ -12,6 +12,7 @@
 #include "gro_tcp6.h"
 #include "gro_udp4.h"
 #include "gro_vxlan6_tcp4.h"
+#include "gro_vxlan6_tcp6.h"
 #include "gro_vxlan_tcp4.h"
 #include "gro_vxlan_tcp6.h"
 #include "gro_vxlan_udp4.h"
@@ -26,17 +27,22 @@ static gro_tbl_create_fn tbl_create_fn[RTE_GRO_TYPE_MAX_NUM] = {
 		gro_tcp4_tbl_create, gro_vxlan_tcp4_tbl_create,
 		gro_udp4_tbl_create, gro_vxlan_udp4_tbl_create,
 		gro_tcp6_tbl_create, gro_vxlan_tcp6_tbl_create,
-		gro_vxlan6_tcp4_tbl_create, NULL};
+		gro_vxlan6_tcp4_tbl_create, gro_vxlan6_tcp6_tbl_create,
+		NULL};
 static gro_tbl_destroy_fn tbl_destroy_fn[RTE_GRO_TYPE_MAX_NUM] = {
 			gro_tcp4_tbl_destroy, gro_vxlan_tcp4_tbl_destroy,
 			gro_udp4_tbl_destroy, gro_vxlan_udp4_tbl_destroy,
 			gro_tcp6_tbl_destroy, gro_vxlan_tcp6_tbl_destroy,
-			gro_vxlan6_tcp4_tbl_destroy, NULL};
+			gro_vxlan6_tcp4_tbl_destroy,
+			gro_vxlan6_tcp6_tbl_destroy,
+			NULL};
 static gro_tbl_pkt_count_fn tbl_pkt_count_fn[RTE_GRO_TYPE_MAX_NUM] = {
 			gro_tcp4_tbl_pkt_count, gro_vxlan_tcp4_tbl_pkt_count,
 			gro_udp4_tbl_pkt_count, gro_vxlan_udp4_tbl_pkt_count,
 			gro_tcp6_tbl_pkt_count, gro_vxlan_tcp6_tbl_pkt_count,
-			gro_vxlan6_tcp4_tbl_pkt_count, NULL};
+			gro_vxlan6_tcp4_tbl_pkt_count,
+			gro_vxlan6_tcp6_tbl_pkt_count,
+			NULL};
 
 #define IS_IPV4_TCP_PKT(ptype) (RTE_ETH_IS_IPV4_HDR(ptype) && \
 		((ptype & RTE_PTYPE_L4_TCP) == RTE_PTYPE_L4_TCP) && \
@@ -100,6 +106,19 @@ static gro_tbl_pkt_count_fn tbl_pkt_count_fn[RTE_GRO_TYPE_MAX_NUM] = {
 		 ((ptype & RTE_PTYPE_INNER_L3_MASK) == \
 		  RTE_PTYPE_INNER_L3_IPV4_EXT_UNKNOWN)))
 
+#define IS_IPV6_VXLAN_TCP6_PKT(ptype) (RTE_ETH_IS_IPV6_HDR(ptype) && \
+		((ptype & RTE_PTYPE_L4_UDP) == RTE_PTYPE_L4_UDP) && \
+		((ptype & RTE_PTYPE_TUNNEL_VXLAN) == \
+		 RTE_PTYPE_TUNNEL_VXLAN) && \
+		((ptype & RTE_PTYPE_INNER_L4_TCP) == \
+		 RTE_PTYPE_INNER_L4_TCP) && \
+		(((ptype & RTE_PTYPE_INNER_L3_MASK) == \
+		  RTE_PTYPE_INNER_L3_IPV6) || \
+		 ((ptype & RTE_PTYPE_INNER_L3_MASK) == \
+		  RTE_PTYPE_INNER_L3_IPV6_EXT) || \
+		 ((ptype & RTE_PTYPE_INNER_L3_MASK) == \
+		  RTE_PTYPE_INNER_L3_IPV6_EXT_UNKNOWN)))
+
 /*
  * GRO context structure. It keeps the table structures, which are
  * used to merge packets, for different GRO types. Before using
@@ -218,13 +237,20 @@ rte_gro_reassemble_burst(struct rte_mbuf **pkts,
 	struct gro_vxlan6_tcp4_item
 		vxlan6_tcp4_items[RTE_GRO_MAX_BURST_ITEM_NUM] = {{{0}} };
 
+	/* Allocate a reassembly table for IPv6 VXLAN TCP/IPv6 GRO */
+	struct gro_vxlan6_tcp6_tbl vxlan6_tcp6_tbl;
+	struct gro_vxlan6_tcp6_flow
+		vxlan6_tcp6_flows[RTE_GRO_MAX_BURST_ITEM_NUM];
+	struct gro_vxlan6_tcp6_item
+		vxlan6_tcp6_items[RTE_GRO_MAX_BURST_ITEM_NUM] = {{{0}} };
+
 	struct rte_mbuf *unprocess_pkts[nb_pkts];
 	uint32_t item_num;
 	int32_t ret;
 	uint16_t i, unprocess_num = 0, nb_after_gro = nb_pkts;
 	uint8_t do_tcp4_gro = 0, do_vxlan_tcp_gro = 0, do_udp4_gro = 0,
 		do_vxlan_udp_gro = 0, do_tcp6_gro = 0, do_vxlan_tcp6_gro = 0,
-		do_vxlan6_tcp4_gro = 0;
+		do_vxlan6_tcp4_gro = 0, do_vxlan6_tcp6_gro = 0;
 
 	if (unlikely((param->gro_types & (RTE_GRO_IPV4_VXLAN_TCP_IPV4 |
 					RTE_GRO_TCP_IPV4 |
@@ -232,7 +258,8 @@ rte_gro_reassemble_burst(struct rte_mbuf **pkts,
 					RTE_GRO_UDP_IPV4 |
 					RTE_GRO_TCP_IPV6 |
 					RTE_GRO_IPV4_VXLAN_TCP_IPV6 |
-					RTE_GRO_IPV6_VXLAN_TCP_IPV4)) == 0))
+					RTE_GRO_IPV6_VXLAN_TCP_IPV4 |
+					RTE_GRO_IPV6_VXLAN_TCP_IPV6)) == 0))
 		return nb_pkts;
 
 	/* Get the maximum number of packets */
@@ -331,6 +358,19 @@ rte_gro_reassemble_burst(struct rte_mbuf **pkts,
 		do_vxlan6_tcp4_gro = 1;
 	}
 
+	if (param->gro_types & RTE_GRO_IPV6_VXLAN_TCP_IPV6) {
+		for (i = 0; i < item_num; i++)
+			vxlan6_tcp6_flows[i].start_index = INVALID_ARRAY_INDEX;
+
+		vxlan6_tcp6_tbl.flows = vxlan6_tcp6_flows;
+		vxlan6_tcp6_tbl.items = vxlan6_tcp6_items;
+		vxlan6_tcp6_tbl.flow_num = 0;
+		vxlan6_tcp6_tbl.item_num = 0;
+		vxlan6_tcp6_tbl.max_flow_num = item_num;
+		vxlan6_tcp6_tbl.max_item_num = item_num;
+		do_vxlan6_tcp6_gro = 1;
+	}
+
 	for (i = 0; i < nb_pkts; i++) {
 		/*
 		 * The timestamp is ignored, since all packets
@@ -396,6 +436,15 @@ rte_gro_reassemble_burst(struct rte_mbuf **pkts,
 				nb_after_gro--;
 			else if (ret < 0)
 				unprocess_pkts[unprocess_num++] = pkts[i];
+		} else if (IS_IPV6_VXLAN_TCP6_PKT(pkts[i]->packet_type) &&
+				do_vxlan6_tcp6_gro) {
+			ret = gro_vxlan6_tcp6_reassemble(pkts[i],
+							&vxlan6_tcp6_tbl, 0);
+			if (ret > 0)
+				/* Merge successfully */
+				nb_after_gro--;
+			else if (ret < 0)
+				unprocess_pkts[unprocess_num++] = pkts[i];
 		} else
 			unprocess_pkts[unprocess_num++] = pkts[i];
 	}
@@ -440,6 +489,11 @@ rte_gro_reassemble_burst(struct rte_mbuf **pkts,
 					0, &pkts[i], nb_pkts - i);
 		}
 
+		if (do_vxlan6_tcp6_gro) {
+			i += gro_vxlan6_tcp6_tbl_timeout_flush(&vxlan6_tcp6_tbl,
+					0, &pkts[i], nb_pkts - i);
+		}
+
 		/* Copy unprocessed packets */
 		if (unprocess_num > 0) {
 			memcpy(&pkts[i], unprocess_pkts,
@@ -460,11 +514,12 @@ rte_gro_reassemble(struct rte_mbuf **pkts,
 	struct rte_mbuf *unprocess_pkts[nb_pkts];
 	struct gro_ctx *gro_ctx = ctx;
 	void *tcp_tbl, *udp_tbl, *vxlan_tcp_tbl, *vxlan_udp_tbl, *tcp6_tbl,
-		*vxlan_tcp6_tbl, *vxlan6_tcp4_tbl;
+		*vxlan_tcp6_tbl, *vxlan6_tcp4_tbl, *vxlan6_tcp6_tbl;
 	uint64_t current_time;
 	uint16_t i, unprocess_num = 0;
 	uint8_t do_tcp4_gro, do_vxlan_tcp_gro, do_udp4_gro, do_vxlan_udp_gro,
-		do_tcp6_gro, do_vxlan_tcp6_gro, do_vxlan6_tcp4_gro;
+		do_tcp6_gro, do_vxlan_tcp6_gro, do_vxlan6_tcp4_gro,
+		do_vxlan6_tcp6_gro;
 
 	if (unlikely((gro_ctx->gro_types & (RTE_GRO_IPV4_VXLAN_TCP_IPV4 |
 					RTE_GRO_TCP_IPV4 |
@@ -472,7 +527,8 @@ rte_gro_reassemble(struct rte_mbuf **pkts,
 					RTE_GRO_UDP_IPV4 |
 					RTE_GRO_TCP_IPV6 |
 					RTE_GRO_IPV4_VXLAN_TCP_IPV6 |
-					RTE_GRO_IPV6_VXLAN_TCP_IPV4)) == 0))
+					RTE_GRO_IPV6_VXLAN_TCP_IPV4 |
+					RTE_GRO_IPV6_VXLAN_TCP_IPV6)) == 0))
 		return nb_pkts;
 
 	tcp_tbl = gro_ctx->tbls[RTE_GRO_TCP_IPV4_INDEX];
@@ -482,6 +538,7 @@ rte_gro_reassemble(struct rte_mbuf **pkts,
 	tcp6_tbl = gro_ctx->tbls[RTE_GRO_TCP_IPV6_INDEX];
 	vxlan_tcp6_tbl = gro_ctx->tbls[RTE_GRO_IPV4_VXLAN_TCP_IPV6_INDEX];
 	vxlan6_tcp4_tbl = gro_ctx->tbls[RTE_GRO_IPV6_VXLAN_TCP_IPV4_INDEX];
+	vxlan6_tcp6_tbl = gro_ctx->tbls[RTE_GRO_IPV6_VXLAN_TCP_IPV6_INDEX];
 
 	do_tcp4_gro = (gro_ctx->gro_types & RTE_GRO_TCP_IPV4) ==
 		RTE_GRO_TCP_IPV4;
@@ -497,6 +554,8 @@ rte_gro_reassemble(struct rte_mbuf **pkts,
 				== RTE_GRO_IPV4_VXLAN_TCP_IPV6;
 	do_vxlan6_tcp4_gro = (gro_ctx->gro_types & RTE_GRO_IPV6_VXLAN_TCP_IPV4)
 				== RTE_GRO_IPV6_VXLAN_TCP_IPV4;
+	do_vxlan6_tcp6_gro = (gro_ctx->gro_types & RTE_GRO_IPV6_VXLAN_TCP_IPV6)
+				== RTE_GRO_IPV6_VXLAN_TCP_IPV6;
 
 	current_time = rte_rdtsc();
 
@@ -536,6 +595,11 @@ rte_gro_reassemble(struct rte_mbuf **pkts,
 			if (gro_vxlan6_tcp4_reassemble(pkts[i], vxlan6_tcp4_tbl,
 						current_time) < 0)
 				unprocess_pkts[unprocess_num++] = pkts[i];
+		} else if (IS_IPV6_VXLAN_TCP6_PKT(pkts[i]->packet_type) &&
+				do_vxlan6_tcp6_gro) {
+			if (gro_vxlan6_tcp6_reassemble(pkts[i], vxlan6_tcp6_tbl,
+						current_time) < 0)
+				unprocess_pkts[unprocess_num++] = pkts[i];
 		} else
 			unprocess_pkts[unprocess_num++] = pkts[i];
 	}
@@ -612,6 +676,13 @@ rte_gro_timeout_flush(void *ctx,
 		num += gro_vxlan6_tcp4_tbl_timeout_flush(gro_ctx->tbls[
 				RTE_GRO_IPV6_VXLAN_TCP_IPV4_INDEX],
 				flush_timestamp, &out[num], left_nb_out);
+		left_nb_out = max_nb_out - num;
+	}
+
+	if ((gro_types & RTE_GRO_IPV6_VXLAN_TCP_IPV6) && left_nb_out > 0) {
+		num += gro_vxlan6_tcp6_tbl_timeout_flush(gro_ctx->tbls[
+				RTE_GRO_IPV6_VXLAN_TCP_IPV6_INDEX],
+				flush_timestamp, &out[num], left_nb_out);
 	}
 
 	return num;
diff --git a/lib/librte_gro/rte_gro.h b/lib/librte_gro/rte_gro.h
index 29499800f5..cb0895f03d 100644
--- a/lib/librte_gro/rte_gro.h
+++ b/lib/librte_gro/rte_gro.h
@@ -47,6 +47,9 @@ extern "C" {
 #define RTE_GRO_IPV6_VXLAN_TCP_IPV4_INDEX 6
 #define RTE_GRO_IPV6_VXLAN_TCP_IPV4 (1ULL << RTE_GRO_IPV6_VXLAN_TCP_IPV4_INDEX)
 /**< IPv6 VxLAN TCP/IPv4 GRO flag. */
+#define RTE_GRO_IPV6_VXLAN_TCP_IPV6_INDEX 7
+#define RTE_GRO_IPV6_VXLAN_TCP_IPV6 (1ULL << RTE_GRO_IPV6_VXLAN_TCP_IPV6_INDEX)
+/**< IPv6 VxLAN TCP/IPv6 GRO flag. */
 
 /**
  * Structure used to create GRO context objects or used to pass
-- 
2.17.1

