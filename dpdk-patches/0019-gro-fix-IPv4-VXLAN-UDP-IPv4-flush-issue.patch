From ae6166c2286b66be4493792cc19cec1c295bbf41 Mon Sep 17 00:00:00 2001
From: Yi Yang <yangyi01@inspur.com>
Date: Fri, 15 Jan 2021 04:50:53 -0500
Subject: [PATCH 19/19] gro: fix IPv4 VXLAN UDP/IPv4 flush issue

Note: if a UDP packet has been reassembled, it can be flushed
immediately.

Signed-off-by: Yi Yang <yangyi01@inspur.com>
---
 lib/librte_gro/gro_vxlan_udp4.c | 31 ++++++++++++++++++++++++-------
 lib/librte_gro/gro_vxlan_udp4.h |  1 +
 2 files changed, 25 insertions(+), 7 deletions(-)

diff --git a/lib/librte_gro/gro_vxlan_udp4.c b/lib/librte_gro/gro_vxlan_udp4.c
index 37476361d5..634b2fc4ca 100644
--- a/lib/librte_gro/gro_vxlan_udp4.c
+++ b/lib/librte_gro/gro_vxlan_udp4.c
@@ -43,7 +43,7 @@ gro_vxlan_udp4_tbl_create(uint16_t socket_id,
 	}
 	tbl->max_item_num = entries_num;
 
-	size = sizeof(struct gro_vxlan_udp4_flow) * entries_num;
+	size = sizeof(struct gro_vxlan_udp4_flow) * max_flow_num;
 	tbl->flows = rte_zmalloc_socket(__func__,
 			size,
 			RTE_CACHE_LINE_SIZE,
@@ -54,9 +54,9 @@ gro_vxlan_udp4_tbl_create(uint16_t socket_id,
 		return NULL;
 	}
 
-	for (i = 0; i < entries_num; i++)
+	for (i = 0; i < max_flow_num; i++)
 		tbl->flows[i].start_index = INVALID_ARRAY_INDEX;
-	tbl->max_flow_num = entries_num;
+	tbl->max_flow_num = max_flow_num;
 
 	return tbl;
 }
@@ -156,6 +156,7 @@ insert_new_flow(struct gro_vxlan_udp4_tbl *tbl,
 	if (unlikely(flow_idx == INVALID_ARRAY_INDEX))
 		return INVALID_ARRAY_INDEX;
 
+	tbl->flows[flow_idx].head_tail = 0;
 	dst = &(tbl->flows[flow_idx].key);
 
 	rte_ether_addr_copy(&(src->inner_key.eth_saddr),
@@ -374,13 +375,15 @@ gro_vxlan_udp4_reassemble(struct rte_mbuf *pkt,
 	 * packet into the flow.
 	 */
 	if (find == 0) {
+		uint32_t flow_idx;
+
 		item_idx = insert_new_item(tbl, pkt, start_time,
 				INVALID_ARRAY_INDEX, frag_offset,
 				is_last_frag);
 		if (unlikely(item_idx == INVALID_ARRAY_INDEX))
 			return -1;
-		if (insert_new_flow(tbl, &key, item_idx) ==
-				INVALID_ARRAY_INDEX) {
+		flow_idx = insert_new_flow(tbl, &key, item_idx);
+		if (flow_idx == INVALID_ARRAY_INDEX) {
 			/*
 			 * Fail to insert a new flow, so
 			 * delete the inserted packet.
@@ -388,6 +391,8 @@ gro_vxlan_udp4_reassemble(struct rte_mbuf *pkt,
 			delete_item(tbl, item_idx, INVALID_ARRAY_INDEX);
 			return -1;
 		}
+		if ((frag_offset == 0) || is_last_frag)
+			tbl->flows[flow_idx].head_tail = 1;
 		return 0;
 	}
 
@@ -402,6 +407,8 @@ gro_vxlan_udp4_reassemble(struct rte_mbuf *pkt,
 						&(tbl->items[cur_idx]),
 						pkt, cmp, frag_offset,
 						is_last_frag)) {
+				if ((frag_offset == 0) || is_last_frag)
+					tbl->flows[i].head_tail += 1;
 				return 1;
 			}
 			/*
@@ -413,6 +420,8 @@ gro_vxlan_udp4_reassemble(struct rte_mbuf *pkt,
 						frag_offset, is_last_frag) ==
 					INVALID_ARRAY_INDEX)
 				return -1;
+			if ((frag_offset == 0) || is_last_frag)
+				tbl->flows[i].head_tail += 1;
 			return 0;
 		}
 
@@ -436,11 +445,15 @@ gro_vxlan_udp4_reassemble(struct rte_mbuf *pkt,
 			return -1;
 		tbl->items[item_idx].inner_item.next_pkt_idx = cur_idx;
 		tbl->flows[i].start_index = item_idx;
+		if ((frag_offset == 0) || is_last_frag)
+			tbl->flows[i].head_tail += 1;
 	} else {
 		if (insert_new_item(tbl, pkt, start_time, prev_idx,
 					frag_offset, is_last_frag
 					) == INVALID_ARRAY_INDEX)
 			return -1;
+		if ((frag_offset == 0) || is_last_frag)
+			tbl->flows[i].head_tail += 1;
 	}
 
 	return 0;
@@ -502,8 +515,12 @@ gro_vxlan_udp4_tbl_timeout_flush(struct gro_vxlan_udp4_tbl *tbl,
 
 		j = tbl->flows[i].start_index;
 		while (j != INVALID_ARRAY_INDEX) {
-			if (tbl->items[j].inner_item.start_time <=
-					flush_timestamp) {
+			/* The flow will be flushed if it is expired or
+			 * has been reassembled successfully.
+			 */
+			if ((tbl->flows[i].head_tail == 2) ||
+			    (tbl->items[j].inner_item.start_time <=
+					flush_timestamp)) {
 				gro_vxlan_udp4_merge_items(tbl, j);
 				out[k++] = tbl->items[j].inner_item.firstseg;
 				if (tbl->items[j].inner_item.nb_merged > 1)
diff --git a/lib/librte_gro/gro_vxlan_udp4.h b/lib/librte_gro/gro_vxlan_udp4.h
index d045221243..2e439eaa73 100644
--- a/lib/librte_gro/gro_vxlan_udp4.h
+++ b/lib/librte_gro/gro_vxlan_udp4.h
@@ -33,6 +33,7 @@ struct gro_vxlan_udp4_flow {
 	 * indicates an empty flow.
 	 */
 	uint32_t start_index;
+	uint32_t head_tail;
 };
 
 struct gro_vxlan_udp4_item {
-- 
2.17.1

